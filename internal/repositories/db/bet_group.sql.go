// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bet_group.sql

package db

import (
	"context"
)

const getBetGroup = `-- name: GetBetGroup :one
SELECT
    bet_groups.id, bet_groups.group_name, bet_groups.group_number
FROM
    bet_groups
WHERE
    bet_groups.id = ?
`

type GetBetGroupRow struct {
	BetGroup BetGroup `db:"bet_group" json:"bet_group"`
}

func (q *Queries) GetBetGroup(ctx context.Context, id int64) (GetBetGroupRow, error) {
	row := q.db.QueryRowContext(ctx, getBetGroup, id)
	var i GetBetGroupRow
	err := row.Scan(&i.BetGroup.ID, &i.BetGroup.GroupName, &i.BetGroup.GroupNumber)
	return i, err
}

const getBetGroupByName = `-- name: GetBetGroupByName :many
SELECT
    bet_groups.id, bet_groups.group_name, bet_groups.group_number
FROM
    bet_groups
WHERE
    bet_groups.group_name = ?
`

type GetBetGroupByNameRow struct {
	BetGroup BetGroup `db:"bet_group" json:"bet_group"`
}

func (q *Queries) GetBetGroupByName(ctx context.Context, groupName string) ([]GetBetGroupByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, getBetGroupByName, groupName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBetGroupByNameRow
	for rows.Next() {
		var i GetBetGroupByNameRow
		if err := rows.Scan(&i.BetGroup.ID, &i.BetGroup.GroupName, &i.BetGroup.GroupNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBetGroups = `-- name: GetBetGroups :many
SELECT
    bet_groups.id, bet_groups.group_name, bet_groups.group_number
FROM
    bet_groups
`

type GetBetGroupsRow struct {
	BetGroup BetGroup `db:"bet_group" json:"bet_group"`
}

func (q *Queries) GetBetGroups(ctx context.Context) ([]GetBetGroupsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBetGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBetGroupsRow
	for rows.Next() {
		var i GetBetGroupsRow
		if err := rows.Scan(&i.BetGroup.ID, &i.BetGroup.GroupName, &i.BetGroup.GroupNumber); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
