// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: gambler.sql

package db

import (
	"context"
)

const createGambler = `-- name: CreateGambler :one
INSERT INTO
    gamblers (
        gambler_name,
        document,
        document_type,
        birth_date
    )
VALUES
    ($1, $2, $3, $4) RETURNING id, gambler_name, document, document_type, birth_date
`

type CreateGamblerParams struct {
	GamblerName  string  `db:"gambler_name" json:"gambler_name"`
	Document     string  `db:"document" json:"document"`
	DocumentType DocType `db:"document_type" json:"document_type"`
	BirthDate    string  `db:"birth_date" json:"birth_date"`
}

func (q *Queries) CreateGambler(ctx context.Context, arg CreateGamblerParams) (Gambler, error) {
	row := q.db.QueryRow(ctx, createGambler,
		arg.GamblerName,
		arg.Document,
		arg.DocumentType,
		arg.BirthDate,
	)
	var i Gambler
	err := row.Scan(
		&i.ID,
		&i.GamblerName,
		&i.Document,
		&i.DocumentType,
		&i.BirthDate,
	)
	return i, err
}

const getGambler = `-- name: GetGambler :one
SELECT
    gamblers.id, gamblers.gambler_name, gamblers.document, gamblers.document_type, gamblers.birth_date,
    bets.id, bets.gambler_id, bets.bet_type, bets.bet_price, bets.bet_choice, bets.deleted_at
FROM
    gamblers
    LEFT JOIN bets ON gamblers.id = bets.gambler_id
WHERE
    gamblers.id = $1
`

type GetGamblerRow struct {
	Gambler Gambler `db:"gambler" json:"gambler"`
	Bet     Bet     `db:"bet" json:"bet"`
}

func (q *Queries) GetGambler(ctx context.Context, id int32) (GetGamblerRow, error) {
	row := q.db.QueryRow(ctx, getGambler, id)
	var i GetGamblerRow
	err := row.Scan(
		&i.Gambler.ID,
		&i.Gambler.GamblerName,
		&i.Gambler.Document,
		&i.Gambler.DocumentType,
		&i.Gambler.BirthDate,
		&i.Bet.ID,
		&i.Bet.GamblerID,
		&i.Bet.BetType,
		&i.Bet.BetPrice,
		&i.Bet.BetChoice,
		&i.Bet.DeletedAt,
	)
	return i, err
}

const getGamblers = `-- name: GetGamblers :many
SELECT
    gamblers.id, gamblers.gambler_name, gamblers.document, gamblers.document_type, gamblers.birth_date
FROM
    gamblers
`

type GetGamblersRow struct {
	Gambler Gambler `db:"gambler" json:"gambler"`
}

func (q *Queries) GetGamblers(ctx context.Context) ([]GetGamblersRow, error) {
	rows, err := q.db.Query(ctx, getGamblers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamblersRow
	for rows.Next() {
		var i GetGamblersRow
		if err := rows.Scan(
			&i.Gambler.ID,
			&i.Gambler.GamblerName,
			&i.Gambler.Document,
			&i.Gambler.DocumentType,
			&i.Gambler.BirthDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
