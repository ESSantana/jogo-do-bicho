// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gambler.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createGambler = `-- name: CreateGambler :exec
INSERT INTO
    gamblers (
        gambler_name,
        document,
        document_type,
        birth_date
    )
VALUES
    (?, ?, ?, ?)
`

type CreateGamblerParams struct {
	GamblerName  string               `db:"gambler_name" json:"gambler_name"`
	Document     string               `db:"document" json:"document"`
	DocumentType GamblersDocumentType `db:"document_type" json:"document_type"`
	BirthDate    time.Time            `db:"birth_date" json:"birth_date"`
}

func (q *Queries) CreateGambler(ctx context.Context, arg CreateGamblerParams) error {
	_, err := q.db.ExecContext(ctx, createGambler,
		arg.GamblerName,
		arg.Document,
		arg.DocumentType,
		arg.BirthDate,
	)
	return err
}

const deleteGambler = `-- name: DeleteGambler :exec
UPDATE
    gamblers
SET
    deleted_at = ?
WHERE
    id = ?
`

type DeleteGamblerParams struct {
	DeletedAt sql.NullTime `db:"deleted_at" json:"deleted_at"`
	ID        int64        `db:"id" json:"id"`
}

func (q *Queries) DeleteGambler(ctx context.Context, arg DeleteGamblerParams) error {
	_, err := q.db.ExecContext(ctx, deleteGambler, arg.DeletedAt, arg.ID)
	return err
}

const getGambler = `-- name: GetGambler :many
SELECT
    gamblers.id, gamblers.gambler_name, gamblers.document, gamblers.document_type, gamblers.birth_date, gamblers.updated_at, gamblers.deleted_at,
    bets.id, bets.gambler_id, bets.bet_type, bets.bet_price, bets.bet_choice, bets.deleted_at
FROM
    gamblers
    LEFT JOIN bets ON gamblers.id = bets.gambler_id
WHERE
    gamblers.id = ?
`

type GetGamblerRow struct {
	Gambler Gambler `db:"gambler" json:"gambler"`
	Bet     Bet     `db:"bet" json:"bet"`
}

func (q *Queries) GetGambler(ctx context.Context, id int64) ([]GetGamblerRow, error) {
	rows, err := q.db.QueryContext(ctx, getGambler, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamblerRow
	for rows.Next() {
		var i GetGamblerRow
		if err := rows.Scan(
			&i.Gambler.ID,
			&i.Gambler.GamblerName,
			&i.Gambler.Document,
			&i.Gambler.DocumentType,
			&i.Gambler.BirthDate,
			&i.Gambler.UpdatedAt,
			&i.Gambler.DeletedAt,
			&i.Bet.ID,
			&i.Bet.GamblerID,
			&i.Bet.BetType,
			&i.Bet.BetPrice,
			&i.Bet.BetChoice,
			&i.Bet.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGamblers = `-- name: GetGamblers :many
SELECT
    gamblers.id, gamblers.gambler_name, gamblers.document, gamblers.document_type, gamblers.birth_date, gamblers.updated_at, gamblers.deleted_at
FROM
    gamblers
`

type GetGamblersRow struct {
	Gambler Gambler `db:"gambler" json:"gambler"`
}

func (q *Queries) GetGamblers(ctx context.Context) ([]GetGamblersRow, error) {
	rows, err := q.db.QueryContext(ctx, getGamblers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGamblersRow
	for rows.Next() {
		var i GetGamblersRow
		if err := rows.Scan(
			&i.Gambler.ID,
			&i.Gambler.GamblerName,
			&i.Gambler.Document,
			&i.Gambler.DocumentType,
			&i.Gambler.BirthDate,
			&i.Gambler.UpdatedAt,
			&i.Gambler.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGambler = `-- name: UpdateGambler :exec
UPDATE
    gamblers
SET
    gambler_name = ?,
    document = ?,
    document_type = ?,
    birth_date = ?
WHERE
    id = ?
    AND gamblers.deleted_at IS NOT NULL
`

type UpdateGamblerParams struct {
	GamblerName  string               `db:"gambler_name" json:"gambler_name"`
	Document     string               `db:"document" json:"document"`
	DocumentType GamblersDocumentType `db:"document_type" json:"document_type"`
	BirthDate    *time.Time            `db:"birth_date" json:"birth_date"`
	ID           int64                `db:"id" json:"id"`
}

func (q *Queries) UpdateGambler(ctx context.Context, arg UpdateGamblerParams) error {
	_, err := q.db.ExecContext(ctx, updateGambler,
		arg.GamblerName,
		arg.Document,
		arg.DocumentType,
		arg.BirthDate,
		arg.ID,
	)
	return err
}
