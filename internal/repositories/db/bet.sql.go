// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: bet.sql

package db

import (
	"context"
)

const createBet = `-- name: CreateBet :exec
INSERT INTO
    bets (id, animal, bet_number, bet_price)
VALUES
    ('?', '?', '?', '?')
`

func (q *Queries) CreateBet(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, createBet)
	return err
}

const getBet = `-- name: GetBet :one
SELECT
    id, animal, bet_number, bet_price
FROM
    bets
WHERE
    id = '?'
`

func (q *Queries) GetBet(ctx context.Context) (Bet, error) {
	row := q.db.QueryRowContext(ctx, getBet)
	var i Bet
	err := row.Scan(
		&i.ID,
		&i.Animal,
		&i.BetNumber,
		&i.BetPrice,
	)
	return i, err
}

const getBets = `-- name: GetBets :many
SELECT
    id, animal, bet_number, bet_price
FROM
    bets
`

func (q *Queries) GetBets(ctx context.Context) ([]Bet, error) {
	rows, err := q.db.QueryContext(ctx, getBets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Bet
	for rows.Next() {
		var i Bet
		if err := rows.Scan(
			&i.ID,
			&i.Animal,
			&i.BetNumber,
			&i.BetPrice,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
